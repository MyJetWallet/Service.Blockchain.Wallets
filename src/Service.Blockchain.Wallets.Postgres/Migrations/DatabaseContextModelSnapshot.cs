// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.Blockchain.Wallets.Postgres;

#nullable disable

namespace Service.Blockchain.Wallets.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blockchain-wallets")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyJetWallet.Fireblocks.Domain.Models.VaultAccounts.VaultAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AutoFuel")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerRefId")
                        .HasColumnType("text");

                    b.Property<bool>("HiddenOnUI")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("vault_accounts", "blockchain-wallets");
                });

            modelBuilder.Entity("MyJetWallet.Fireblocks.Domain.Models.VaultAssets.VaultAsset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Available")
                        .HasColumnType("numeric");

                    b.Property<string>("BlockHash")
                        .HasColumnType("text");

                    b.Property<string>("BlockHeight")
                        .HasColumnType("text");

                    b.Property<decimal>("Frozen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LockedAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Pending")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Staked")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("VaultAccountId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VaultAccountId");

                    b.ToTable("VaultAsset", "blockchain-wallets");
                });

            modelBuilder.Entity("Service.Blockchain.Wallets.Postgres.Entities.UserAddressEntity", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressLowerCase")
                        .HasColumnType("text");

                    b.Property<string>("AssetNetwork")
                        .HasColumnType("text");

                    b.Property<string>("AssetSymbol")
                        .HasColumnType("text");

                    b.Property<decimal>("Bip44AddressIndex")
                        .HasColumnType("numeric");

                    b.Property<string>("BrokerId")
                        .HasColumnType("text");

                    b.Property<string>("CircleWalletId")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("EnterpriseAddress")
                        .HasColumnType("text");

                    b.Property<string>("FireblocksAssetId")
                        .HasColumnType("text");

                    b.Property<string>("FireblocksVaultAccountId")
                        .HasColumnType("text");

                    b.Property<int>("Integration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LegacyAddress")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.HasIndex("AssetSymbol", "AssetNetwork");

                    b.HasIndex("WalletId", "AssetSymbol", "AssetNetwork")
                        .IsUnique();

                    b.HasIndex("WalletId", "ClientId", "BrokerId");

                    b.ToTable("addresses", "blockchain-wallets");
                });

            modelBuilder.Entity("MyJetWallet.Fireblocks.Domain.Models.VaultAssets.VaultAsset", b =>
                {
                    b.HasOne("MyJetWallet.Fireblocks.Domain.Models.VaultAccounts.VaultAccount", null)
                        .WithMany("VaultAssets")
                        .HasForeignKey("VaultAccountId");
                });

            modelBuilder.Entity("MyJetWallet.Fireblocks.Domain.Models.VaultAccounts.VaultAccount", b =>
                {
                    b.Navigation("VaultAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
